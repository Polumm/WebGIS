<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>MAP</title>
    <link href="../../libs/ol/ol.css" rel="stylesheet" type="text/css" />
    <script src="../../libs/ol/ol.js" type="text/javascript"></script>
    <!--  引入第三方插件库 -->
    <script src="../../libs/jquery-1.11.2.min.js" type="text/javascript"></script>
    <style type="text/css">
        body,html,div,ul,li,iframe,p,img{
            border:none;padding:0;margin:0;
        }
        #map{
            width:100%;
            height:1300px;
        }
        /*#menu{
            width:100%;
            height:20px;         
            padding:5px 10px;
            font-size:14px;
            font-family:"微软雅黑";
            left:10px;    
        }*/
        .checkbox
        {
            margin:5px 15px;
        }
        .marker {
          width: 20px;
          height: 20px;
          border: 1px solid #088;
          border-radius: 10px;
          background-color: #0FF;
          opacity: 0.5;
        }
        .address {
          text-decoration: none;
          color: #aa3300;
          font-size: 14px;
          font-weight: bold;
          text-shadow: black 0.1em 0.1em 0.2em;
        }

    </style>
</head>
<body>
    
    <div id="map" >
    </div>
    
    <script type="text/javascript">
        var WHU = ol.proj.fromLonLat([114.35057,30.54070]);
        var HUST = ol.proj.fromLonLat([114.40776,30.51415]);
		var CUG = ol.proj.fromLonLat([114.39661,30.52172]);
        var WHUT = ol.proj.fromLonLat([114.34641,30.51954]);
		var ZUEL = ol.proj.fromLonLat([114.38607,30.47354]);
		var SCAU = ol.proj.fromLonLat([114.35423,30.47701]);
		var CCNU = ol.proj.fromLonLat([114.36085,30.51899]);
        //var center = ol.proj.transform([114.39661,30.52172], "EPSG:4326", "EPSG:3857");
		var view = new ol.View({
            center: [12730000, 3567000], //地图初始中心点
            zoom: 12 //地图初始显示级别
        });
      var map = new ol.Map({
        target: 'map',
        layers: [
                new ol.layer.Tile({
                  source: new ol.source.XYZ({
                    url: 'http://t6.tianditu.com/DataServer?T=vec_w&x={x}&y={y}&l={z}&tk=03f674e1445083e177685daa4b9ec235'
                  }),
                  isGroup: true,
                  name: '天地图矢量底图'
                }),
                new ol.layer.Tile({
                  source: new ol.source.XYZ({
                    url: 'http://t6.tianditu.com/DataServer?T=cva_w&x={x}&y={y}&l={z}&tk=03f674e1445083e177685daa4b9ec235'
                  }),
                  isGroup: true,
                  name: '天地图文字标注'
                })
            ],
		  loadTilesWhileAnimating: true,
            //地图视图设置(定位的时候有动画效果)
            view: view
      });

		
        /**
        * 创建矢量标注样式函数,设置image为图标ol.style.Icon
        * @param {ol.Feature} feature 要素
        */
        var createLabelStyle = function (feature) {
            return new ol.style.Style({
                image: new ol.style.Icon(/** @type {olx.style.IconOptions} */({
                    anchor: [0.5, 60],
                    anchorOrigin: 'top-right',
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                    offsetOrigin: 'top-right',
                    // offset:[0,10],
                    // scale:0.5,  //图标缩放比例
                    opacity: 0.75,  //透明度
                    src: '../../images/label/blueIcon.png' //图标的url
                })),
                text: new ol.style.Text({
                    textAlign: 'center', //位置
                    textBaseline: 'middle', //基准线
                    font: 'normal 14px 微软雅黑',  //文字样式
                    text: feature.get('name'),  //文本内容
                    fill: new ol.style.Fill({ color: '#aa3300' }), //文本填充样式（即文字颜色）
                    stroke: new ol.style.Stroke({ color: '#ffcc33', width: 2 })
                })
            });
        };
		
		
        //实例化Vector要素，通过矢量图层添加到地图容器中
        var iconFeature1 = new ol.Feature({
            geometry: new ol.geom.Point(WHU),
            name: '武汉大学',  //名称属性
           
        });
        iconFeature1.setStyle(createLabelStyle(iconFeature1));
        //矢量标注的数据源
        var vectorSource1 = new ol.source.Vector({
            features: [iconFeature1]
        });
        //矢量标注图层
        var vectorLayer1 = new ol.layer.Vector({
            source: vectorSource1
        });
        map.addLayer(vectorLayer1);
     /*---------------------------------------------------------------------*/
      var iconFeature2 = new ol.Feature({
            geometry: new ol.geom.Point(CUG),
            name: '中国地质大学',  //名称属性 
        });
       iconFeature2.setStyle(createLabelStyle(iconFeature2));
        //矢量标注的数据源
        var vectorSource = new ol.source.Vector({
            features: [iconFeature2]
        });
        //矢量标注图层
        var vectorLayer2 = new ol.layer.Vector({
            source: vectorSource
        });
        map.addLayer(vectorLayer2);
	 /*---------------------------------------------------------------------*/	
		var iconFeature3 = new ol.Feature({
            geometry: new ol.geom.Point(HUST),
            name: '华中科技大学',  //名称属性 
        });
       iconFeature3.setStyle(createLabelStyle(iconFeature3));
        //矢量标注的数据源
        var vectorSource = new ol.source.Vector({
            features: [iconFeature3]
        });
        //矢量标注图层
        var vectorLayer3 = new ol.layer.Vector({
            source: vectorSource
        });
        map.addLayer(vectorLayer3);
		/*---------------------------------------------------------------------*/	
		var iconFeature4 = new ol.Feature({
            geometry: new ol.geom.Point(WHUT),
            name: '武汉理工大学',  //名称属性 
        });
       iconFeature4.setStyle(createLabelStyle(iconFeature4));
        //矢量标注的数据源
        var vectorSource = new ol.source.Vector({
            features: [iconFeature4]
        });
        //矢量标注图层
        var vectorLayer4 = new ol.layer.Vector({
            source: vectorSource
        });
        map.addLayer(vectorLayer4);
		/*---------------------------------------------------------------------*/	
		var iconFeature5 = new ol.Feature({
            geometry: new ol.geom.Point(ZUEL),
            name: '中南财经政法大学',  //名称属性 
        });
       iconFeature5.setStyle(createLabelStyle(iconFeature5));
        //矢量标注的数据源
        var vectorSource = new ol.source.Vector({
            features: [iconFeature5]
        });
        //矢量标注图层
        var vectorLayer5 = new ol.layer.Vector({
            source: vectorSource
        });
        map.addLayer(vectorLayer5);
		/*---------------------------------------------------------------------*/	
		var iconFeature6 = new ol.Feature({
            geometry: new ol.geom.Point(SCAU),
            name: '华中农业大学',  //名称属性 
        });
       iconFeature6.setStyle(createLabelStyle(iconFeature6));
        //矢量标注的数据源
        var vectorSource  = new ol.source.Vector({
            features: [iconFeature6]
        });
        //矢量标注图层
        var vectorLayer6 = new ol.layer.Vector({
            source: vectorSource
        });
        map.addLayer(vectorLayer6);
		/*---------------------------------------------------------------------*/	
		var iconFeature7 = new ol.Feature({
            geometry: new ol.geom.Point(CCNU),
            name: '华中师范大学',  //名称属性 
        });
       iconFeature7.setStyle(createLabelStyle(iconFeature7));
        //矢量标注的数据源
        var vectorSource = new ol.source.Vector({
            features: [iconFeature7]
        });
        //矢量标注图层
        var vectorLayer7 = new ol.layer.Vector({
            source: vectorSource
        });
        map.addLayer(vectorLayer7);
	/*---------------------------------------------------------------------*/	
		
		 map.on('pointermove', function (e) {
            var pixel = map.getEventPixel(e.originalEvent);
            var hit = map.hasFeatureAtPixel(pixel);
            map.getTargetElement().style.cursor = hit ? 'pointer' : '';
        });//当鼠标移动到标注点的时候，鼠标指针变成手指
		

        function jump(){
        window.location.href="../../../CUG2/CUGlog.html";
        }
		map.on('click', function (evt) {
			var coordinate = evt.coordinate;
            //判断当前单击处是否有要素，捕获到要素时弹出popup
            var feature = map.forEachFeatureAtPixel(evt.pixel, function ( feature, layer) { return  feature; });
            if (feature){
				var name= feature.get('name');
				if(name=="武汉大学") rotate1();
                if(name=="中国地质大学") {
                    rotate3();       
                    window.setTimeout(jump,3000);//5000毫秒
                }
				if(name=="华中科技大学") rotate2();
				// if(name=="中国地质大学") rotate3();
				if(name=="武汉理工大学") rotate4();
				if(name=="中南财经政法大学") rotate5();
				if(name=="华中农业大学") rotate6();
				if(name=="华中师范大学") rotate7();
				} 		
        });
		
		function rotate1() {
           var rotate1 = ol.animation.rotate({
                duration: 2000,  //持续时间
                rotation: -4 * Math.PI  //旋转角度
            });
            map.beforeRender(rotate1); //地图渲染前设置旋转动画效果(rotate)
            view.setCenter(WHU); //定位
			view.setZoom(17);

        };
		
		function rotate2() {
           var rotate2 = ol.animation.rotate({
                duration: 2000,  //持续时间
                rotation: -4 * Math.PI  //旋转角度
            });
            map.beforeRender(rotate2); //地图渲染前设置旋转动画效果(rotate)
            view.setCenter(HUST); //定位
			view.setZoom(16);
        };
		
		function rotate3() {
           var rotate3 = ol.animation.rotate({
                duration: 2000,  //持续时间
                rotation: -4 * Math.PI  //旋转角度
            });
            map.beforeRender(rotate3); //地图渲染前设置旋转动画效果(rotate)
            view.setCenter(CUG); //定位
			view.setZoom(16);
        };
		
		function rotate4() {
           var rotate4 = ol.animation.rotate({
                duration: 2000,  //持续时间
                rotation: -4 * Math.PI  //旋转角度
            });
            map.beforeRender(rotate4); //地图渲染前设置旋转动画效果(rotate)
            view.setCenter(WHUT); //定位
			view.setZoom(16);
        };
		
		function rotate5() {
           var rotate5 = ol.animation.rotate({
                duration: 2000,  //持续时间
                rotation: -4 * Math.PI  //旋转角度
            });
            map.beforeRender(rotate5); //地图渲染前设置旋转动画效果(rotate)
            view.setCenter(ZUEL); //定位
			view.setZoom(16);
        };
		
		function rotate6() {
           var rotate6 = ol.animation.rotate({
                duration: 2000,  //持续时间
                rotation: -4 * Math.PI  //旋转角度
            });
            map.beforeRender(rotate6); //地图渲染前设置旋转动画效果(rotate)
            view.setCenter(SCAU); //定位
			view.setZoom(16);
        };
		
		function rotate7() {
           var rotate7 = ol.animation.rotate({
                duration: 2000,  //持续时间
                rotation: -4 * Math.PI  //旋转角度
            });
            map.beforeRender(rotate7); //地图渲染前设置旋转动画效果(rotate)
            view.setCenter(CCNU); //定位
			view.setZoom(16);
        };
		
		
    </script>
	
	
</body>
</html>
